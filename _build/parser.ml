type token =
  | EOF
  | INT of (Range.t * int32)
  | NULL of (Range.t)
  | TRUE of (Range.t)
  | FALSE of (Range.t)
  | STRING of (Range.t * string)
  | IDENT of (Range.t * string)
  | CIDENT of (Range.t * string)
  | TINT of (Range.t)
  | TBOOL of (Range.t)
  | TUNIT of (Range.t)
  | TSTRING of (Range.t)
  | CAST of (Range.t)
  | IF of (Range.t)
  | IFNULL of (Range.t)
  | ELSE of (Range.t)
  | WHILE of (Range.t)
  | FOR of (Range.t)
  | RETURN of (Range.t)
  | FAIL of (Range.t)
  | THIS of (Range.t)
  | SUPER of (Range.t)
  | CLASS of (Range.t)
  | NEW of (Range.t)
  | FUN of (Range.t)
  | EXTERN of (Range.t)
  | SEMI of (Range.t)
  | COMMA of (Range.t)
  | LBRACE of (Range.t)
  | RBRACE of (Range.t)
  | PLUS of (Range.t)
  | DASH of (Range.t)
  | STAR of (Range.t)
  | SLASH of (Range.t)
  | PERCENT of (Range.t)
  | GT of (Range.t)
  | GTEQ of (Range.t)
  | LT of (Range.t)
  | LTEQ of (Range.t)
  | EQEQ of (Range.t)
  | EQ of (Range.t)
  | BANG of (Range.t)
  | BANGEQ of (Range.t)
  | BAR of (Range.t)
  | AMPER of (Range.t)
  | IOR of (Range.t)
  | IAND of (Range.t)
  | LPAREN of (Range.t)
  | RPAREN of (Range.t)
  | LBRACKET of (Range.t)
  | RBRACKET of (Range.t)
  | TILDE of (Range.t)
  | LTLT of (Range.t)
  | GTGT of (Range.t)
  | GTGTGT of (Range.t)
  | ARROW of (Range.t)
  | EXTEND of (Range.t)
  | DOT of (Range.t)
  | QUESTION of (Range.t)

open Parsing;;
# 2 "parser.mly"
open Ast;;
open Range;;
# 67 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* NULL *);
  259 (* TRUE *);
  260 (* FALSE *);
  261 (* STRING *);
  262 (* IDENT *);
  263 (* CIDENT *);
  264 (* TINT *);
  265 (* TBOOL *);
  266 (* TUNIT *);
  267 (* TSTRING *);
  268 (* CAST *);
  269 (* IF *);
  270 (* IFNULL *);
  271 (* ELSE *);
  272 (* WHILE *);
  273 (* FOR *);
  274 (* RETURN *);
  275 (* FAIL *);
  276 (* THIS *);
  277 (* SUPER *);
  278 (* CLASS *);
  279 (* NEW *);
  280 (* FUN *);
  281 (* EXTERN *);
  282 (* SEMI *);
  283 (* COMMA *);
  284 (* LBRACE *);
  285 (* RBRACE *);
  286 (* PLUS *);
  287 (* DASH *);
  288 (* STAR *);
  289 (* SLASH *);
  290 (* PERCENT *);
  291 (* GT *);
  292 (* GTEQ *);
  293 (* LT *);
  294 (* LTEQ *);
  295 (* EQEQ *);
  296 (* EQ *);
  297 (* BANG *);
  298 (* BANGEQ *);
  299 (* BAR *);
  300 (* AMPER *);
  301 (* IOR *);
  302 (* IAND *);
  303 (* LPAREN *);
  304 (* RPAREN *);
  305 (* LBRACKET *);
  306 (* RBRACKET *);
  307 (* TILDE *);
  308 (* LTLT *);
  309 (* GTGT *);
  310 (* GTGTGT *);
  311 (* ARROW *);
  312 (* EXTEND *);
  313 (* DOT *);
  314 (* QUESTION *);
    0|]

let yylhs = "\255\255\
\001\000\008\000\008\000\008\000\008\000\008\000\012\000\012\000\
\013\000\013\000\015\000\018\000\018\000\020\000\020\000\011\000\
\019\000\016\000\016\000\021\000\021\000\010\000\010\000\002\000\
\002\000\004\000\023\000\023\000\014\000\014\000\025\000\025\000\
\026\000\026\000\009\000\006\000\006\000\006\000\006\000\027\000\
\027\000\027\000\028\000\028\000\029\000\029\000\024\000\024\000\
\005\000\005\000\005\000\005\000\005\000\003\000\022\000\022\000\
\017\000\017\000\031\000\031\000\030\000\030\000\032\000\032\000\
\033\000\033\000\034\000\034\000\035\000\035\000\035\000\036\000\
\036\000\036\000\036\000\036\000\037\000\037\000\037\000\037\000\
\038\000\038\000\038\000\039\000\039\000\040\000\040\000\040\000\
\040\000\041\000\041\000\041\000\041\000\041\000\041\000\043\000\
\043\000\043\000\042\000\042\000\045\000\045\000\045\000\044\000\
\044\000\007\000\007\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\048\000\048\000\000\000"

let yylen = "\002\000\
\002\000\003\000\002\000\002\000\002\000\000\000\000\000\002\000\
\007\000\000\000\011\000\003\000\000\000\000\000\002\000\009\000\
\002\000\000\000\001\000\002\000\004\000\006\000\006\000\011\000\
\011\000\002\000\003\000\000\000\001\000\003\000\000\000\001\000\
\001\000\003\000\004\000\001\000\001\000\001\000\002\000\001\000\
\001\000\003\000\000\000\001\000\001\000\003\000\002\000\000\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\
\000\000\001\000\001\000\003\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\003\000\003\000\001\000\003\000\003\000\003\000\001\000\
\003\000\003\000\001\000\003\000\001\000\002\000\002\000\002\000\
\001\000\001\000\001\000\011\000\005\000\001\000\003\000\001\000\
\001\000\004\000\001\000\001\000\004\000\006\000\004\000\003\000\
\003\000\001\000\001\000\005\000\007\000\008\000\010\000\008\000\
\010\000\005\000\009\000\004\000\002\000\005\000\007\000\010\000\
\010\000\005\000\009\000\003\000\000\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\041\000\036\000\037\000\000\000\040\000\000\000\
\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\001\000\000\000\003\000\
\005\000\039\000\000\000\000\000\000\000\000\000\000\000\042\000\
\002\000\000\000\000\000\019\000\008\000\000\000\052\000\049\000\
\050\000\051\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\090\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\000\089\000\000\000\099\000\000\000\100\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\086\000\087\000\000\000\088\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\000\000\017\000\
\000\000\000\000\000\000\000\000\000\000\058\000\104\000\000\000\
\000\000\000\000\000\000\030\000\095\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\084\000\000\000\105\000\000\000\
\022\000\000\000\021\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\101\000\000\000\
\000\000\000\000\034\000\098\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\026\000\000\000\000\000\000\000\106\000\107\000\
\000\000\000\000\015\000\000\000\000\000\060\000\000\000\093\000\
\000\000\000\000\056\000\000\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\117\000\000\000\
\000\000\000\000\016\000\102\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\000\000\
\124\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\116\000\
\000\000\000\000\000\000\000\000\024\000\000\000\108\000\000\000\
\000\000\122\000\114\000\046\000\000\000\118\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\119\000\109\000\000\000\126\000\000\000\000\000\000\000\092\000\
\112\000\000\000\110\000\000\000\000\000\000\000\000\000\000\000\
\000\000\123\000\115\000\000\000\011\000\121\000\113\000\120\000\
\111\000\000\000\000\000\009\000"

let yydgoto = "\002\000\
\009\000\010\000\116\000\148\000\054\000\149\000\178\000\012\000\
\013\000\014\000\015\000\029\000\006\001\082\000\114\000\035\000\
\117\000\075\000\076\000\156\000\036\000\196\000\151\000\179\000\
\083\000\084\000\016\000\222\000\223\000\056\000\118\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\183\000\184\000\013\001"

let yysindex = "\040\000\
\167\002\000\000\000\000\000\000\000\000\055\255\000\000\077\255\
\000\000\167\002\006\255\067\000\065\255\167\002\167\002\045\255\
\067\255\056\255\000\000\030\255\093\255\000\000\167\002\000\000\
\000\000\000\000\098\255\120\255\108\255\192\255\098\255\000\000\
\000\000\008\255\102\255\000\000\000\000\098\255\000\000\000\000\
\000\000\000\000\000\000\104\255\095\255\097\255\114\255\192\255\
\255\255\255\255\255\255\255\255\000\000\000\000\000\000\113\255\
\121\255\127\255\133\255\234\254\125\255\087\255\043\255\142\255\
\000\000\000\000\241\254\000\000\132\255\000\000\135\255\157\255\
\060\255\016\255\163\255\161\255\255\255\193\255\194\255\162\255\
\165\255\190\255\189\255\000\000\000\000\000\000\177\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\225\255\255\255\073\255\098\255\000\000\098\255\000\000\
\187\255\248\000\098\255\208\255\188\255\000\000\000\000\191\255\
\255\255\201\255\192\255\000\000\000\000\121\255\127\255\133\255\
\234\254\125\255\125\255\087\255\087\255\087\255\087\255\043\255\
\043\255\043\255\142\255\142\255\000\000\195\255\000\000\196\255\
\000\000\098\255\000\000\219\255\019\255\214\255\152\002\098\255\
\235\255\248\000\027\255\221\255\000\000\255\255\000\000\255\255\
\205\255\212\255\000\000\000\000\000\000\249\255\255\255\229\255\
\098\255\224\255\234\255\246\255\247\255\248\255\250\255\095\255\
\098\255\152\002\000\000\241\254\232\255\029\000\000\000\000\000\
\008\000\026\000\000\000\037\000\043\000\000\000\050\000\000\000\
\038\000\255\255\000\000\066\000\000\000\010\000\255\255\098\255\
\255\255\098\255\255\255\245\255\000\000\255\255\000\000\055\000\
\098\255\098\255\000\000\000\000\089\000\088\000\092\000\114\000\
\079\000\082\000\000\255\081\000\110\000\116\000\000\000\095\000\
\000\000\123\000\255\255\102\000\108\000\152\000\131\000\000\000\
\126\000\152\002\130\000\152\002\098\255\255\255\145\000\000\000\
\124\000\150\000\151\000\134\000\000\000\255\255\000\000\170\000\
\255\255\000\000\000\000\000\000\161\000\000\000\175\000\255\255\
\153\000\152\002\159\000\152\002\142\000\172\000\160\000\152\002\
\000\000\000\000\152\002\000\000\166\000\210\000\098\255\000\000\
\000\000\203\000\000\000\209\000\152\002\188\000\200\000\152\002\
\152\002\000\000\000\000\192\255\000\000\000\000\000\000\000\000\
\000\000\204\000\175\000\000\000"

let yyrindex = "\000\000\
\236\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\236\001\000\000\000\000\000\000\236\001\236\001\029\255\
\000\000\215\000\000\000\000\000\000\000\000\000\236\001\000\000\
\000\000\000\000\189\000\000\000\000\000\000\000\189\000\000\000\
\000\000\000\000\000\000\000\000\000\000\222\000\000\000\000\000\
\000\000\000\000\000\000\022\000\080\000\000\000\000\000\218\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\255\
\253\255\221\001\037\002\220\255\210\001\085\001\225\000\138\000\
\000\000\000\000\109\000\000\000\051\000\000\000\000\000\205\000\
\000\000\000\000\000\000\000\000\217\000\000\000\000\000\254\254\
\000\000\237\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\217\000\000\000\000\000\000\000\135\002\000\000\
\000\000\243\000\222\000\226\000\000\000\000\000\000\000\000\000\
\217\000\000\000\000\000\000\000\000\000\074\002\049\002\043\002\
\012\002\235\001\004\002\110\001\135\001\160\001\185\001\254\000\
\027\001\056\001\167\000\196\000\000\000\000\000\000\000\000\000\
\000\000\135\002\000\000\000\000\000\000\000\000\025\255\189\000\
\000\000\243\000\000\000\000\000\000\000\000\000\000\000\217\000\
\000\000\000\000\000\000\000\000\000\000\000\000\250\000\000\000\
\092\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\117\002\025\255\000\000\000\000\244\254\023\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\250\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\
\189\000\189\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\235\000\000\000\003\001\000\000\000\000\000\000\
\000\000\000\000\217\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\250\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\
\000\000\000\000\000\000\177\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\117\002\000\000\
\000\000\015\000\000\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\001\000\000"

let yygindex = "\000\000\
\000\000\152\255\226\255\123\255\000\000\001\000\086\255\085\000\
\150\255\000\000\000\000\000\000\252\000\227\255\000\000\228\255\
\158\255\173\001\000\000\140\001\186\001\069\255\132\001\125\001\
\000\000\182\001\111\001\000\000\076\001\000\000\156\001\226\001\
\227\001\225\001\231\001\025\000\132\000\091\000\044\000\233\255\
\000\000\109\255\124\255\000\000\164\255\058\255\028\255\000\000"

let yytablesize = 957
let yytable = "\053\000\
\055\000\011\000\071\000\180\000\150\000\235\000\214\000\251\000\
\144\000\154\000\011\000\020\000\166\000\072\000\011\000\011\000\
\093\000\053\000\181\000\094\000\087\000\112\000\161\000\011\000\
\168\000\085\000\086\000\034\000\088\000\010\001\180\000\034\000\
\188\000\105\000\038\000\248\000\099\000\250\000\074\000\150\000\
\001\000\106\000\048\000\204\000\099\000\181\000\041\000\081\000\
\027\001\154\000\253\000\031\001\033\001\048\000\021\000\041\000\
\021\000\026\000\182\000\009\001\017\000\191\000\150\000\247\000\
\021\000\018\001\022\000\021\000\020\001\030\000\150\000\100\000\
\102\000\103\000\142\000\021\000\031\000\038\000\026\001\100\000\
\141\000\030\001\032\001\018\000\110\000\182\000\180\000\111\000\
\180\000\012\001\023\000\162\000\053\000\017\001\019\000\221\000\
\019\001\145\000\024\000\025\000\146\000\181\000\026\000\181\000\
\003\000\004\000\005\000\033\000\007\000\034\000\180\000\028\000\
\180\000\027\000\155\000\074\000\180\000\130\000\131\000\180\000\
\080\000\004\000\005\000\185\000\007\000\181\000\037\000\181\000\
\241\000\180\000\221\000\181\000\180\000\180\000\181\000\038\000\
\195\000\023\001\099\000\100\000\101\000\182\000\032\000\182\000\
\181\000\139\000\140\000\181\000\181\000\073\000\077\000\078\000\
\034\000\079\000\155\000\054\000\054\000\089\000\054\000\095\000\
\096\000\097\000\098\000\195\000\150\000\182\000\090\000\182\000\
\217\000\091\000\220\000\182\000\224\000\104\000\182\000\226\000\
\092\000\054\000\107\000\054\000\228\000\229\000\108\000\109\000\
\182\000\113\000\115\000\182\000\182\000\136\000\137\000\138\000\
\039\000\040\000\041\000\042\000\043\000\044\000\119\000\120\000\
\218\000\039\000\040\000\041\000\042\000\043\000\044\000\195\000\
\121\000\034\000\034\000\045\000\046\000\122\000\047\000\001\001\
\123\000\124\000\003\001\048\000\045\000\046\000\049\000\047\000\
\125\000\007\001\132\000\133\000\134\000\135\000\143\000\049\000\
\050\000\152\000\158\000\159\000\167\000\160\000\051\000\169\000\
\186\000\050\000\052\000\165\000\164\000\068\000\068\000\051\000\
\068\000\189\000\032\000\052\000\192\000\053\000\034\001\039\000\
\040\000\041\000\042\000\043\000\044\000\193\000\068\000\068\000\
\068\000\068\000\194\000\068\000\030\000\068\000\198\000\206\000\
\216\000\225\000\045\000\046\000\106\000\047\000\062\000\062\000\
\199\000\062\000\106\000\106\000\106\000\049\000\106\000\106\000\
\106\000\106\000\106\000\106\000\200\000\201\000\202\000\050\000\
\203\000\062\000\106\000\106\000\062\000\051\000\062\000\096\000\
\096\000\052\000\096\000\096\000\096\000\096\000\207\000\208\000\
\096\000\096\000\096\000\096\000\096\000\096\000\106\000\096\000\
\096\000\096\000\096\000\096\000\211\000\096\000\096\000\096\000\
\209\000\096\000\096\000\096\000\097\000\097\000\096\000\097\000\
\097\000\097\000\097\000\210\000\213\000\097\000\097\000\097\000\
\097\000\097\000\097\000\215\000\097\000\097\000\097\000\097\000\
\097\000\212\000\097\000\097\000\097\000\227\000\097\000\097\000\
\097\000\091\000\091\000\097\000\091\000\091\000\091\000\091\000\
\230\000\231\000\091\000\091\000\091\000\091\000\091\000\233\000\
\232\000\091\000\091\000\091\000\091\000\091\000\234\000\091\000\
\236\000\091\000\021\000\091\000\091\000\091\000\094\000\094\000\
\237\000\094\000\094\000\094\000\094\000\238\000\239\000\094\000\
\094\000\094\000\094\000\094\000\240\000\242\000\094\000\094\000\
\094\000\094\000\094\000\243\000\094\000\244\000\094\000\245\000\
\094\000\094\000\094\000\083\000\083\000\246\000\083\000\083\000\
\083\000\249\000\254\000\255\000\083\000\083\000\083\000\083\000\
\083\000\111\000\146\000\083\000\083\000\083\000\083\000\083\000\
\002\001\083\000\004\001\083\000\000\001\083\000\083\000\083\000\
\081\000\081\000\005\001\081\000\081\000\081\000\014\001\015\001\
\008\001\081\000\081\000\081\000\081\000\081\000\011\001\016\001\
\081\000\081\000\081\000\081\000\081\000\021\001\081\000\022\001\
\081\000\024\001\081\000\081\000\081\000\082\000\082\000\025\001\
\082\000\082\000\082\000\028\001\029\001\035\001\082\000\082\000\
\082\000\082\000\082\000\006\000\018\000\082\000\082\000\082\000\
\082\000\082\000\007\000\082\000\013\000\082\000\031\000\082\000\
\082\000\082\000\080\000\080\000\020\000\080\000\003\000\004\000\
\005\000\153\000\007\000\080\000\080\000\080\000\080\000\080\000\
\057\000\033\000\080\000\080\000\080\000\080\000\080\000\014\000\
\080\000\059\000\080\000\055\000\080\000\080\000\080\000\077\000\
\077\000\043\000\077\000\038\000\045\000\010\000\036\001\157\000\
\077\000\077\000\077\000\077\000\077\000\187\000\147\000\077\000\
\077\000\077\000\077\000\077\000\197\000\077\000\205\000\077\000\
\163\000\077\000\077\000\077\000\079\000\079\000\219\000\079\000\
\252\000\190\000\126\000\128\000\127\000\079\000\079\000\079\000\
\079\000\079\000\129\000\000\000\079\000\079\000\079\000\079\000\
\079\000\000\000\079\000\000\000\079\000\000\000\079\000\079\000\
\079\000\078\000\078\000\000\000\078\000\000\000\000\000\000\000\
\000\000\000\000\078\000\078\000\078\000\078\000\078\000\000\000\
\000\000\078\000\078\000\078\000\078\000\078\000\000\000\078\000\
\000\000\078\000\000\000\078\000\078\000\078\000\076\000\076\000\
\000\000\076\000\000\000\000\000\000\000\000\000\000\000\076\000\
\076\000\076\000\076\000\076\000\000\000\000\000\076\000\076\000\
\076\000\076\000\076\000\000\000\076\000\000\000\076\000\074\000\
\074\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\074\000\074\000\074\000\074\000\074\000\000\000\000\000\074\000\
\074\000\074\000\074\000\074\000\000\000\074\000\000\000\074\000\
\075\000\075\000\000\000\075\000\000\000\000\000\000\000\000\000\
\000\000\075\000\075\000\075\000\075\000\075\000\000\000\000\000\
\075\000\075\000\075\000\075\000\075\000\000\000\075\000\000\000\
\075\000\072\000\072\000\000\000\072\000\000\000\000\000\000\000\
\000\000\000\000\072\000\072\000\072\000\072\000\072\000\000\000\
\000\000\072\000\072\000\072\000\072\000\072\000\000\000\072\000\
\000\000\072\000\073\000\073\000\000\000\073\000\000\000\000\000\
\000\000\000\000\000\000\073\000\073\000\073\000\073\000\073\000\
\000\000\000\000\073\000\073\000\073\000\073\000\073\000\000\000\
\073\000\000\000\073\000\071\000\071\000\000\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\064\000\
\071\000\064\000\000\000\071\000\071\000\071\000\071\000\071\000\
\000\000\071\000\000\000\071\000\069\000\069\000\000\000\069\000\
\000\000\064\000\064\000\000\000\064\000\000\000\064\000\000\000\
\000\000\069\000\000\000\000\000\069\000\069\000\069\000\069\000\
\069\000\000\000\069\000\000\000\069\000\070\000\070\000\000\000\
\070\000\000\000\000\000\000\000\000\000\067\000\067\000\000\000\
\067\000\000\000\070\000\000\000\000\000\070\000\070\000\070\000\
\070\000\070\000\000\000\070\000\000\000\070\000\067\000\067\000\
\067\000\067\000\000\000\067\000\000\000\067\000\066\000\066\000\
\000\000\066\000\000\000\000\000\065\000\065\000\000\000\065\000\
\000\000\000\000\063\000\063\000\000\000\063\000\000\000\066\000\
\000\000\066\000\066\000\000\000\066\000\065\000\066\000\065\000\
\065\000\000\000\065\000\000\000\065\000\063\000\063\000\000\000\
\063\000\028\000\063\000\061\000\061\000\000\000\061\000\028\000\
\028\000\028\000\000\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\000\000\000\000\000\000\000\000\061\000\028\000\
\028\000\061\000\028\000\061\000\000\000\000\000\000\000\000\000\
\028\000\028\000\028\000\000\000\028\000\028\000\000\000\028\000\
\028\000\028\000\000\000\000\000\028\000\000\000\000\000\000\000\
\028\000\028\000\028\000\028\000\028\000\000\000\028\000\028\000\
\028\000\028\000\028\000\028\000\000\000\044\000\000\000\000\000\
\000\000\000\000\028\000\170\000\171\000\172\000\000\000\173\000\
\174\000\000\000\175\000\176\000\046\000\003\000\004\000\005\000\
\006\000\007\000\000\000\177\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000"

let yycheck = "\030\000\
\030\000\001\000\031\000\151\000\111\000\006\001\194\000\236\000\
\107\000\114\000\010\000\006\001\146\000\006\001\014\000\015\000\
\039\001\048\000\151\000\042\001\051\000\006\001\121\000\023\000\
\006\001\049\000\050\000\027\000\052\000\002\001\178\000\031\000\
\006\001\049\001\006\001\234\000\049\001\236\000\038\000\146\000\
\001\000\057\001\018\001\177\000\057\001\178\000\049\001\047\000\
\021\001\154\000\238\000\024\001\025\001\029\001\049\001\058\001\
\049\001\058\001\151\000\002\001\006\001\160\000\169\000\234\000\
\049\001\008\001\000\000\049\001\011\001\040\001\177\000\049\001\
\030\001\031\001\105\000\049\001\047\001\049\001\021\001\057\001\
\104\000\024\001\025\001\007\001\025\001\178\000\234\000\028\001\
\236\000\004\001\026\001\122\000\123\000\008\001\010\000\202\000\
\011\001\025\001\014\000\015\000\028\001\234\000\058\001\236\000\
\007\001\008\001\009\001\023\000\011\001\109\000\002\001\056\001\
\004\001\047\001\114\000\115\000\008\001\093\000\094\000\011\001\
\007\001\008\001\009\001\152\000\011\001\002\001\007\001\004\001\
\227\000\021\001\237\000\008\001\024\001\025\001\011\001\028\001\
\167\000\015\001\052\001\053\001\054\001\234\000\050\001\236\000\
\021\001\102\000\103\000\024\001\025\001\048\001\047\001\057\001\
\152\000\057\001\154\000\026\001\027\001\045\001\029\001\035\001\
\036\001\037\001\038\001\194\000\015\001\002\001\046\001\004\001\
\199\000\043\001\201\000\008\001\203\000\032\001\011\001\206\000\
\044\001\048\001\047\001\050\001\209\000\210\000\048\001\027\001\
\021\001\023\001\026\001\024\001\025\001\099\000\100\000\101\000\
\001\001\002\001\003\001\004\001\005\001\006\001\006\001\006\001\
\200\000\001\001\002\001\003\001\004\001\005\001\006\001\238\000\
\047\001\209\000\210\000\020\001\021\001\049\001\023\001\246\000\
\027\001\029\001\249\000\028\001\020\001\021\001\031\001\023\001\
\048\001\000\001\095\000\096\000\097\000\098\000\006\001\031\001\
\041\001\047\001\027\001\048\001\018\001\047\001\047\001\026\001\
\006\001\041\001\051\001\048\001\050\001\026\001\027\001\047\001\
\029\001\029\001\050\001\051\001\048\001\028\001\028\001\001\001\
\002\001\003\001\004\001\005\001\006\001\050\001\043\001\044\001\
\045\001\046\001\018\001\048\001\040\001\050\001\047\001\040\001\
\007\001\029\001\020\001\021\001\006\001\023\001\026\001\027\001\
\047\001\029\001\012\001\013\001\014\001\031\001\016\001\017\001\
\018\001\019\001\020\001\021\001\047\001\047\001\047\001\041\001\
\047\001\045\001\028\001\029\001\048\001\047\001\050\001\026\001\
\027\001\051\001\029\001\030\001\031\001\032\001\026\001\048\001\
\035\001\036\001\037\001\038\001\039\001\040\001\048\001\042\001\
\043\001\044\001\045\001\046\001\026\001\048\001\049\001\050\001\
\047\001\052\001\053\001\054\001\026\001\027\001\057\001\029\001\
\030\001\031\001\032\001\047\001\047\001\035\001\036\001\037\001\
\038\001\039\001\040\001\026\001\042\001\043\001\044\001\045\001\
\046\001\048\001\048\001\049\001\050\001\047\001\052\001\053\001\
\054\001\026\001\027\001\057\001\029\001\030\001\031\001\032\001\
\024\001\026\001\035\001\036\001\037\001\038\001\039\001\006\001\
\029\001\042\001\043\001\044\001\045\001\046\001\048\001\048\001\
\048\001\050\001\049\001\052\001\053\001\054\001\026\001\027\001\
\027\001\029\001\030\001\031\001\032\001\026\001\048\001\035\001\
\036\001\037\001\038\001\039\001\026\001\048\001\042\001\043\001\
\044\001\045\001\046\001\048\001\048\001\006\001\050\001\029\001\
\052\001\053\001\054\001\026\001\027\001\040\001\029\001\030\001\
\031\001\040\001\026\001\048\001\035\001\036\001\037\001\038\001\
\039\001\028\001\028\001\042\001\043\001\044\001\045\001\046\001\
\015\001\048\001\026\001\050\001\055\001\052\001\053\001\054\001\
\026\001\027\001\020\001\029\001\030\001\031\001\057\001\028\001\
\048\001\035\001\036\001\037\001\038\001\039\001\048\001\048\001\
\042\001\043\001\044\001\045\001\046\001\048\001\048\001\006\001\
\050\001\015\001\052\001\053\001\054\001\026\001\027\001\015\001\
\029\001\030\001\031\001\040\001\029\001\026\001\035\001\036\001\
\037\001\038\001\039\001\000\000\048\001\042\001\043\001\044\001\
\045\001\046\001\028\001\048\001\023\001\050\001\029\001\052\001\
\053\001\054\001\026\001\027\001\048\001\029\001\007\001\008\001\
\009\001\010\001\011\001\035\001\036\001\037\001\038\001\039\001\
\048\001\029\001\042\001\043\001\044\001\045\001\046\001\029\001\
\048\001\048\001\050\001\026\001\052\001\053\001\054\001\026\001\
\027\001\026\001\029\001\049\001\026\001\028\001\035\001\115\000\
\035\001\036\001\037\001\038\001\039\001\154\000\109\000\042\001\
\043\001\044\001\045\001\046\001\169\000\048\001\178\000\050\001\
\123\000\052\001\053\001\054\001\026\001\027\001\200\000\029\001\
\237\000\158\000\089\000\091\000\090\000\035\001\036\001\037\001\
\038\001\039\001\092\000\255\255\042\001\043\001\044\001\045\001\
\046\001\255\255\048\001\255\255\050\001\255\255\052\001\053\001\
\054\001\026\001\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\255\255\048\001\
\255\255\050\001\255\255\052\001\053\001\054\001\026\001\027\001\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\255\255\255\255\042\001\043\001\
\044\001\045\001\046\001\255\255\048\001\255\255\050\001\026\001\
\027\001\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\255\255\048\001\255\255\050\001\
\026\001\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\255\255\255\255\
\042\001\043\001\044\001\045\001\046\001\255\255\048\001\255\255\
\050\001\026\001\027\001\255\255\029\001\255\255\255\255\255\255\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\255\255\048\001\
\255\255\050\001\026\001\027\001\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\255\255\255\255\042\001\043\001\044\001\045\001\046\001\255\255\
\048\001\255\255\050\001\026\001\027\001\255\255\029\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\039\001\029\001\255\255\042\001\043\001\044\001\045\001\046\001\
\255\255\048\001\255\255\050\001\026\001\027\001\255\255\029\001\
\255\255\045\001\046\001\255\255\048\001\255\255\050\001\255\255\
\255\255\039\001\255\255\255\255\042\001\043\001\044\001\045\001\
\046\001\255\255\048\001\255\255\050\001\026\001\027\001\255\255\
\029\001\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\029\001\255\255\039\001\255\255\255\255\042\001\043\001\044\001\
\045\001\046\001\255\255\048\001\255\255\050\001\043\001\044\001\
\045\001\046\001\255\255\048\001\255\255\050\001\026\001\027\001\
\255\255\029\001\255\255\255\255\026\001\027\001\255\255\029\001\
\255\255\255\255\026\001\027\001\255\255\029\001\255\255\043\001\
\255\255\045\001\046\001\255\255\048\001\043\001\050\001\045\001\
\046\001\255\255\048\001\255\255\050\001\045\001\046\001\255\255\
\048\001\006\001\050\001\026\001\027\001\255\255\029\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\255\255\255\255\255\255\255\255\255\255\045\001\028\001\
\029\001\048\001\006\001\050\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\255\255\016\001\017\001\255\255\019\001\
\020\001\021\001\255\255\255\255\006\001\255\255\255\255\255\255\
\028\001\029\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\006\001\255\255\255\255\
\255\255\255\255\028\001\012\001\013\001\014\001\255\255\016\001\
\017\001\255\255\019\001\020\001\021\001\007\001\008\001\009\001\
\010\001\011\001\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  NULL\000\
  TRUE\000\
  FALSE\000\
  STRING\000\
  IDENT\000\
  CIDENT\000\
  TINT\000\
  TBOOL\000\
  TUNIT\000\
  TSTRING\000\
  CAST\000\
  IF\000\
  IFNULL\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  RETURN\000\
  FAIL\000\
  THIS\000\
  SUPER\000\
  CLASS\000\
  NEW\000\
  FUN\000\
  EXTERN\000\
  SEMI\000\
  COMMA\000\
  LBRACE\000\
  RBRACE\000\
  PLUS\000\
  DASH\000\
  STAR\000\
  SLASH\000\
  PERCENT\000\
  GT\000\
  GTEQ\000\
  LT\000\
  LTEQ\000\
  EQEQ\000\
  EQ\000\
  BANG\000\
  BANGEQ\000\
  BAR\000\
  AMPER\000\
  IOR\000\
  IAND\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  TILDE\000\
  LTLT\000\
  GTGT\000\
  GTGTGT\000\
  ARROW\000\
  EXTEND\000\
  DOT\000\
  QUESTION\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prog) in
    Obj.repr(
# 79 "parser.mly"
             ( _1 )
# 619 "parser.ml"
               : Range.t Ast.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 82 "parser.mly"
                    ( Gvdecl(_1)::_3 )
# 628 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'efdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 83 "parser.mly"
                ( Gefdecl(_1)::_2 )
# 636 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.fdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 84 "parser.mly"
               ( Gfdecl(_1)::_2 )
# 644 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'prog) in
    Obj.repr(
# 85 "parser.mly"
               ( Gcdecl(_1)::_2 )
# 652 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                ( [] )
# 658 "parser.ml"
               : 'prog))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                 ( None )
# 664 "parser.ml"
               : 'cidEXT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 90 "parser.mly"
                  ( Some (snd(_2)) )
# 672 "parser.ml"
               : 'cidEXT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Range.t * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'init) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'cinitlist) in
    Obj.repr(
# 93 "parser.mly"
                                          ( (_3,_5)::_7 )
# 685 "parser.ml"
               : 'cinitlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                ( [] )
# 691 "parser.ml"
               : 'cinitlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : 'arglist) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'explist) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : 'cinitlist) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.block) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 97 "parser.mly"
                                                                                  ( (_3, _6, _8, _10) )
# 708 "parser.ml"
               : 'ctor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typid) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fields) in
    Obj.repr(
# 100 "parser.mly"
                      ( _1::_3 )
# 717 "parser.ml"
               : 'fields))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                ( [] )
# 723 "parser.ml"
               : 'fields))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                ( [] )
# 729 "parser.ml"
               : 'methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.fdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'methods) in
    Obj.repr(
# 105 "parser.mly"
                  ( _1::_2 )
# 737 "parser.ml"
               : 'methods))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'cidEXT) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'fields) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'ctor) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'methods) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 108 "parser.mly"
                                                               ( (snd(_2), _3, _5, _6, _7) )
# 752 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 111 "parser.mly"
              ( (_1, _2) )
# 760 "parser.ml"
               : 'typid))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                ( [] )
# 766 "parser.ml"
               : 'arglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'argplus) in
    Obj.repr(
# 115 "parser.mly"
            ( _1 )
# 773 "parser.ml"
               : 'arglist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 118 "parser.mly"
                ( [(_1, _2)] )
# 781 "parser.ml"
               : 'argplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'argplus) in
    Obj.repr(
# 119 "parser.mly"
                            ( (_1, _2)::_4 )
# 791 "parser.ml"
               : 'argplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arglist) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 122 "parser.mly"
                                           ( (Some _1, _2, _4) )
# 803 "parser.ml"
               : 'efdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'arglist) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 123 "parser.mly"
                                             ( (None, _2, _4) )
# 815 "parser.ml"
               : 'efdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'arglist) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.block) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'expOPT) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 126 "parser.mly"
                                                                           ( (Some _1, _2, _4, _7, _9) )
# 832 "parser.ml"
               : Range.t Ast.fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'arglist) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.block) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'expOPT) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 127 "parser.mly"
                                                                             ( (None, _2, _4, _7, _9) )
# 849 "parser.ml"
               : Range.t Ast.fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 130 "parser.mly"
                 ( (_1, _2) )
# 857 "parser.ml"
               : Range.t Ast.block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdecls) in
    Obj.repr(
# 133 "parser.mly"
                      ( _1::_3 )
# 866 "parser.ml"
               : 'vdecls))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
                ( [] )
# 872 "parser.ml"
               : 'vdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.exp) in
    Obj.repr(
# 137 "parser.mly"
        ( Iexp(_1) )
# 879 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 138 "parser.mly"
                           ( Iarray(mk_parse_range _1 _3, _2) )
# 888 "parser.ml"
               : 'init))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                ( [] )
# 894 "parser.ml"
               : 'initlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'initplus) in
    Obj.repr(
# 142 "parser.mly"
             ( _1 )
# 901 "parser.ml"
               : 'initlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 145 "parser.mly"
           ( [_1] )
# 908 "parser.ml"
               : 'initplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'init) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initplus) in
    Obj.repr(
# 146 "parser.mly"
                        ( _1::_3 )
# 917 "parser.ml"
               : 'initplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'init) in
    Obj.repr(
# 149 "parser.mly"
                      ( {v_ty=_1; v_id=_2; v_init=_4 } )
# 927 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 152 "parser.mly"
          ( TInt )
# 934 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 153 "parser.mly"
          ( TBool )
# 941 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference) in
    Obj.repr(
# 154 "parser.mly"
              ( TRef _1 )
# 948 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'reference) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 155 "parser.mly"
                       ( TNullable _1 )
# 956 "parser.ml"
               : Ast.typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 158 "parser.mly"
            ( RString )
# 963 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 159 "parser.mly"
           ( RClass (snd(_1)) )
# 970 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 160 "parser.mly"
                          ( RArray (_1) )
# 979 "parser.ml"
               : 'reference))
; (fun __caml_parser_env ->
    Obj.repr(
# 164 "parser.mly"
                ( [] )
# 985 "parser.ml"
               : 'vdecllist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdeclplus) in
    Obj.repr(
# 165 "parser.mly"
              ( _1 )
# 992 "parser.ml"
               : 'vdecllist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 168 "parser.mly"
           ( [_1] )
# 999 "parser.ml"
               : 'vdeclplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdeclplus) in
    Obj.repr(
# 169 "parser.mly"
                          ( _1::_3 )
# 1008 "parser.ml"
               : 'vdeclplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 172 "parser.mly"
               ( _1::_2 )
# 1016 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "parser.mly"
                 ( [] )
# 1022 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 176 "parser.mly"
         ( Cnull (_1) )
# 1029 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 177 "parser.mly"
         ( Cbool (_1, true) )
# 1036 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 178 "parser.mly"
          ( Cbool (_1, false) )
# 1043 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * int32) in
    Obj.repr(
# 179 "parser.mly"
        ( Cint (fst(_1), snd(_1)) )
# 1050 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 180 "parser.mly"
           ( Cstring (fst(_1), snd(_1)) )
# 1057 "parser.ml"
               : Range.t Ast.const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E2) in
    Obj.repr(
# 183 "parser.mly"
       ( _1 )
# 1064 "parser.ml"
               : Range.t Ast.exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
                 ( None )
# 1070 "parser.ml"
               : 'expOPT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.exp) in
    Obj.repr(
# 187 "parser.mly"
                 ( Some _1 )
# 1077 "parser.ml"
               : 'expOPT))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "parser.mly"
                ( [] )
# 1083 "parser.ml"
               : 'explist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expplus) in
    Obj.repr(
# 191 "parser.mly"
            ( _1 )
# 1090 "parser.ml"
               : 'explist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.exp) in
    Obj.repr(
# 194 "parser.mly"
          ( [_1] )
# 1097 "parser.ml"
               : 'expplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expplus) in
    Obj.repr(
# 195 "parser.mly"
                      ( _1::_3 )
# 1106 "parser.ml"
               : 'expplus))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E2) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E3) in
    Obj.repr(
# 198 "parser.mly"
              ( Binop (IOr _2, _1, _3) )
# 1115 "parser.ml"
               : 'E2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E3) in
    Obj.repr(
# 199 "parser.mly"
       ( _1 )
# 1122 "parser.ml"
               : 'E2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E3) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E4) in
    Obj.repr(
# 202 "parser.mly"
               ( Binop (IAnd _2, _1, _3) )
# 1131 "parser.ml"
               : 'E3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E4) in
    Obj.repr(
# 203 "parser.mly"
       ( _1 )
# 1138 "parser.ml"
               : 'E3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E4) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E5) in
    Obj.repr(
# 206 "parser.mly"
              ( Binop (Or _2, _1, _3) )
# 1147 "parser.ml"
               : 'E4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E5) in
    Obj.repr(
# 207 "parser.mly"
       ( _1 )
# 1154 "parser.ml"
               : 'E4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E5) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E6) in
    Obj.repr(
# 210 "parser.mly"
                ( Binop (And _2, _1, _3) )
# 1163 "parser.ml"
               : 'E5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E6) in
    Obj.repr(
# 211 "parser.mly"
       ( _1 )
# 1170 "parser.ml"
               : 'E5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E7) in
    Obj.repr(
# 214 "parser.mly"
               ( Binop (Eq _2, _1, _3) )
# 1179 "parser.ml"
               : 'E6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E6) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E7) in
    Obj.repr(
# 215 "parser.mly"
                 ( Binop (Neq _2, _1, _3) )
# 1188 "parser.ml"
               : 'E6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E7) in
    Obj.repr(
# 216 "parser.mly"
       ( _1 )
# 1195 "parser.ml"
               : 'E6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 219 "parser.mly"
             ( Binop (Lt _2, _1, _3) )
# 1204 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 220 "parser.mly"
               ( Binop (Lte _2, _1, _3) )
# 1213 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 221 "parser.mly"
             ( Binop (Gt _2, _1, _3) )
# 1222 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E7) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 222 "parser.mly"
               ( Binop (Gte _2, _1, _3) )
# 1231 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E8) in
    Obj.repr(
# 223 "parser.mly"
       ( _1 )
# 1238 "parser.ml"
               : 'E7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E9) in
    Obj.repr(
# 226 "parser.mly"
               ( Binop (Shl _2, _1, _3) )
# 1247 "parser.ml"
               : 'E8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E9) in
    Obj.repr(
# 227 "parser.mly"
                 ( Binop (Shr _2, _1, _3) )
# 1256 "parser.ml"
               : 'E8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E8) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E9) in
    Obj.repr(
# 228 "parser.mly"
               ( Binop (Sar _2, _1, _3) )
# 1265 "parser.ml"
               : 'E8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E9) in
    Obj.repr(
# 229 "parser.mly"
       ( _1 )
# 1272 "parser.ml"
               : 'E8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E10) in
    Obj.repr(
# 232 "parser.mly"
                ( Binop (Plus _2, _1, _3) )
# 1281 "parser.ml"
               : 'E9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E9) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E10) in
    Obj.repr(
# 233 "parser.mly"
                ( Binop (Minus _2, _1, _3) )
# 1290 "parser.ml"
               : 'E9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E10) in
    Obj.repr(
# 234 "parser.mly"
        ( _1 )
# 1297 "parser.ml"
               : 'E9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'E10) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 237 "parser.mly"
                 ( Binop (Times _2, _1, _3) )
# 1306 "parser.ml"
               : 'E10))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 238 "parser.mly"
        ( _1 )
# 1313 "parser.ml"
               : 'E10))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 241 "parser.mly"
             ( Unop (Neg _1, _2) )
# 1321 "parser.ml"
               : 'E11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 242 "parser.mly"
             ( Unop (Lognot _1, _2) )
# 1329 "parser.ml"
               : 'E11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'E11) in
    Obj.repr(
# 243 "parser.mly"
              ( Unop (Not _1, _2) )
# 1337 "parser.ml"
               : 'E11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'E12) in
    Obj.repr(
# 244 "parser.mly"
        ( _1 )
# 1344 "parser.ml"
               : 'E11))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.const) in
    Obj.repr(
# 247 "parser.mly"
          ( Const _1 )
# 1351 "parser.ml"
               : 'E12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 248 "parser.mly"
          ( This _1 )
# 1358 "parser.ml"
               : 'E12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 10 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 9 : Ast.typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : Range.t Ast.exp) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 3 : Range.t * string) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.exp) in
    let _11 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 250 "parser.mly"
      ( New (_2, _4, _8, _10) )
# 1375 "parser.ml"
               : 'E12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'explist) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 251 "parser.mly"
                                     ( Ctor (_2, _4) )
# 1386 "parser.ml"
               : 'E12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lhs_or_call) in
    Obj.repr(
# 252 "parser.mly"
                ( LhsOrCall _1)
# 1393 "parser.ml"
               : 'E12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 253 "parser.mly"
                      ( _2 )
# 1402 "parser.ml"
               : 'E12))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 256 "parser.mly"
          ( Var _1 )
# 1409 "parser.ml"
               : 'lhs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'path) in
    Obj.repr(
# 257 "parser.mly"
         ( Path _1 )
# 1416 "parser.ml"
               : 'lhs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lhs_or_call) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 258 "parser.mly"
                                      ( Index (_1, _3) )
# 1426 "parser.ml"
               : 'lhs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lhs) in
    Obj.repr(
# 261 "parser.mly"
        ( Lhs _1 )
# 1433 "parser.ml"
               : 'lhs_or_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'call) in
    Obj.repr(
# 262 "parser.mly"
         ( Call _1 )
# 1440 "parser.ml"
               : 'lhs_or_call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Range.t * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'explist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 265 "parser.mly"
                                ( Func (_1, _3))
# 1450 "parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Range.t * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'explist) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 266 "parser.mly"
                                          ( SuperMethod (_3, _5) )
# 1462 "parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'path) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'explist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 267 "parser.mly"
                               ( PathMethod (_1, _3) )
# 1472 "parser.ml"
               : 'call))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 270 "parser.mly"
                   ( ThisId _3 )
# 1481 "parser.ml"
               : 'path))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lhs_or_call) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t * string) in
    Obj.repr(
# 271 "parser.mly"
                          ( PathId (_1, _3) )
# 1490 "parser.ml"
               : 'path))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 274 "parser.mly"
       ( _1 )
# 1497 "parser.ml"
               : Range.t Ast.stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 275 "parser.mly"
       ( _1 )
# 1504 "parser.ml"
               : Range.t Ast.stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.stmt) in
    Obj.repr(
# 278 "parser.mly"
                                  ( If (_3, _5, None) )
# 1515 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'M) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 279 "parser.mly"
                                  ( If (_3, _5, Some _7) )
# 1528 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Range.t * string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.stmt) in
    Obj.repr(
# 281 "parser.mly"
     ( IfNull (_3, _4, _6, _8, None) )
# 1542 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Range.t * string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'M) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 283 "parser.mly"
     ( IfNull (_3, _4, _6, _8, Some _10) )
# 1558 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Range.t * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Range.t * string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.stmt) in
    Obj.repr(
# 285 "parser.mly"
     ( Cast (snd(_3), _4, _6, _8, None) )
# 1572 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : Range.t * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Range.t * string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'M) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 287 "parser.mly"
     ( Cast (snd(_3), _4, _6, _8, Some _10) )
# 1588 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 288 "parser.mly"
                               ( While (_3, _5) )
# 1599 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'vdecllist) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expOPT) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'stmtOPT) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'U) in
    Obj.repr(
# 289 "parser.mly"
                                                           ( For (_3, _5, _7, _9) )
# 1614 "parser.ml"
               : 'U))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lhs) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 293 "parser.mly"
                     ( Assign (_1, _3) )
# 1624 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'call) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 294 "parser.mly"
              ( Scall _1 )
# 1632 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 295 "parser.mly"
                                ( Fail (_3) )
# 1643 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'M) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 296 "parser.mly"
                                  ( If (_3, _5, Some _7) )
# 1656 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'reference) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Range.t * string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'M) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 298 "parser.mly"
     ( IfNull (_3, _4, _6, _8, Some _10) )
# 1672 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : Range.t * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : Range.t * string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : Range.t Ast.exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'M) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 300 "parser.mly"
     ( Cast (snd(_3), _4, _6, _8, Some _10) )
# 1688 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Range.t Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 301 "parser.mly"
                               ( While (_3, _5) )
# 1699 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Range.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'vdecllist) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Range.t) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expOPT) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Range.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'stmtOPT) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Range.t) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'M) in
    Obj.repr(
# 302 "parser.mly"
                                                           ( For(_3, _5, _7, _9) )
# 1714 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Range.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Range.t Ast.block) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Range.t) in
    Obj.repr(
# 303 "parser.mly"
                        ( Block (_2) )
# 1723 "parser.ml"
               : 'M))
; (fun __caml_parser_env ->
    Obj.repr(
# 306 "parser.mly"
                 ( None )
# 1729 "parser.ml"
               : 'stmtOPT))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Range.t Ast.stmt) in
    Obj.repr(
# 307 "parser.mly"
                 ( Some _1 )
# 1736 "parser.ml"
               : 'stmtOPT))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Range.t Ast.prog)
