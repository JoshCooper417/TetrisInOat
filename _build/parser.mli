type token =
  | EOF
  | INT of (Range.t * int32)
  | NULL of (Range.t)
  | TRUE of (Range.t)
  | FALSE of (Range.t)
  | STRING of (Range.t * string)
  | IDENT of (Range.t * string)
  | CIDENT of (Range.t * string)
  | TINT of (Range.t)
  | TBOOL of (Range.t)
  | TUNIT of (Range.t)
  | TSTRING of (Range.t)
  | CAST of (Range.t)
  | IF of (Range.t)
  | IFNULL of (Range.t)
  | ELSE of (Range.t)
  | WHILE of (Range.t)
  | FOR of (Range.t)
  | RETURN of (Range.t)
  | FAIL of (Range.t)
  | THIS of (Range.t)
  | SUPER of (Range.t)
  | CLASS of (Range.t)
  | NEW of (Range.t)
  | FUN of (Range.t)
  | EXTERN of (Range.t)
  | SEMI of (Range.t)
  | COMMA of (Range.t)
  | LBRACE of (Range.t)
  | RBRACE of (Range.t)
  | PLUS of (Range.t)
  | DASH of (Range.t)
  | STAR of (Range.t)
  | SLASH of (Range.t)
  | PERCENT of (Range.t)
  | GT of (Range.t)
  | GTEQ of (Range.t)
  | LT of (Range.t)
  | LTEQ of (Range.t)
  | EQEQ of (Range.t)
  | EQ of (Range.t)
  | BANG of (Range.t)
  | BANGEQ of (Range.t)
  | BAR of (Range.t)
  | AMPER of (Range.t)
  | IOR of (Range.t)
  | IAND of (Range.t)
  | LPAREN of (Range.t)
  | RPAREN of (Range.t)
  | LBRACKET of (Range.t)
  | RBRACKET of (Range.t)
  | TILDE of (Range.t)
  | LTLT of (Range.t)
  | GTGT of (Range.t)
  | GTGTGT of (Range.t)
  | ARROW of (Range.t)
  | EXTEND of (Range.t)
  | DOT of (Range.t)
  | QUESTION of (Range.t)

val toplevel :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Range.t Ast.prog
